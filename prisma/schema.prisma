// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// LEADS & CLIENTS - SIMPLIFIED
// ============================================================================

enum LeadStatus {
  FOUND // Found on social media, maps, etc.
  CONTACTED // Initial contact made
  PROPOSAL_SENT // Proposal has been sent
  WON // Converted to client
  LOST // Lead didn't convert
}

enum LeadSource {
  INSTAGRAM // Instagram
  LINKEDIN // LinkedIn
  FACEBOOK // Facebook
  GOOGLE_MAPS // Google Maps/Business
  REFERRAL // Referred by someone
  OTHER // Other sources
}

enum ProjectType {
  STATIC_WEBSITE // Simple static website
  OTHER // Other services
}

enum ProjectStatus {
  PLANNING // Planning phase
  IN_PROGRESS // Currently working on it
  REVIEW // Client review
  COMPLETED // Project completed
  ON_HOLD // Project paused
}

enum PlanType {
  BASIC
  EXTENDED_BASIC
  PROFESIONAL
  EXTENDED_PROFESIONAL
  CUSTOM
}

model Lead {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Contact Information
  contactName  String?
  email        String?
  phone        String?
  businessName String?

  // Lead Details
  status       LeadStatus   @default(FOUND)
  source       LeadSource
  projectType  ProjectType? @default(STATIC_WEBSITE)
  contactNotes String? // General notes about the lead
  proposalUrl  String? // URL to proposal document (Vercel Blob)

  // Relationships
  client Client? // One-to-one when converted

  @@map("leads")
}

model Client {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Reference to original lead
  leadId String @unique
  lead   Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)

  // Additional client information
  contractSigned               Boolean  @default(false)
  contractUrl                  String? // URL to signed contract (Vercel Blob)
  requiresFactura              Boolean? @default(false)
  constanciaSituacionFiscalUrl String? // Tax situation document URL

  // Relationships
  project Project? // One-to-one relationship

  @@map("clients")
}

// ============================================================================
// PROJECTS - SIMPLIFIED
// ============================================================================

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Basic Info
  name        String
  description String?
  status      ProjectStatus @default(PLANNING)

  // Plan & Financial
  planSelected PlanType?
  finalAmount  Decimal?  @db.Decimal(10, 2)
  currency     String    @default("USD")

  // URLs
  websiteUrl     String? // Final website URL
  googleDriveUrl String? // Google Drive folder for own project management (parent folder)

  // Client Relationship
  clientId String @unique // One-to-one relationship
  client   Client @relation(fields: [clientId], references: [id], onDelete: Cascade)

  // Project Assets & Content
  brandAsset BrandAsset? // One-to-one relationship

  @@map("projects")
}

// ============================================================================
// BRAND ASSETS & CLIENT CONTENT - CLIENT ONBOARDING FORM
// ============================================================================

model BrandAsset {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Color Palette (text input from client)
  colorPalette String? // Client can input hex codes, color names, or descriptions

  // Business Content Document (PDF/Word upload)
  businessContentUrl  String? // Vercel Blob URL for uploaded document
  businessContentName String? // Original filename for reference

  // Media Assets (Google Drive - public folder for client uploads)
  googleDriveImagesUrl String? // Public Google Drive folder link for client to upload images/logos

  // Additional Information
  additionalComments String? // Any extra info from the client

  // Completion tracking
  isCompleted Boolean   @default(false) // Whether client has submitted the form
  submittedAt DateTime? // When the form was submitted

  // Relationships
  projectId String  @unique // One-to-one with project
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("brand_assets")
}
